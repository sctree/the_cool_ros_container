// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
import * as path from "../path/mod.ts";
import { ensureDir, ensureDirSync } from "./ensure_dir.ts";
import { exists, existsSync } from "./exists.ts";
import { getFileInfoType } from "./_util.ts";
import { isWindows } from "../_util/os.ts";

/**
 * Ensures that the link exists.
 * If the directory structure does not exist, it is created.
 *
 * @param src the source file path
 * @param dest the destination link path
 */
export async function ensureSymlink(src: string, dest: string) {
  const srcStatInfo = await Deno.lstat(src);
  const srcFilePathType = getFileInfoType(srcStatInfo);

  if (await exists(dest)) {
    const destStatInfo = await Deno.lstat(dest);
    const destFilePathType = getFileInfoType(destStatInfo);
    if (destFilePathType !== "symlink") {
      throw new Error(
        `Ensure path exists, expected 'symlink', got '${destFilePathType}'`,
      );
    }
    return;
  }

  await ensureDir(path.dirname(dest));

  const options: Deno.SymlinkOptions | undefined = isWindows
    ? {
      type: srcFilePathType === "dir" ? "dir" : "file",
    }
    : undefined;

  await Deno.symlink(src, dest, options);
}

/**
 * Ensures that the link exists.
 * If the directory structure does not exist, it is created.
 *
 * @param src the source file path
 * @param dest the destination link path
 */
export function ensureSymlinkSync(src: string, dest: string): void {
  const srcStatInfo = Deno.lstatSync(src);
  const srcFilePathType = getFileInfoType(srcStatInfo);

  if (existsSync(dest)) {
    const destStatInfo = Deno.lstatSync(dest);
    const destFilePathType = getFileInfoType(destStatInfo);
    if (destFilePathType !== "symlink") {
      throw new Error(
        `Ensure path exists, expected 'symlink', got '${destFilePathType}'`,
      );
    }
    return;
  }

  ensureDirSync(path.dirname(dest));

  const options: Deno.SymlinkOptions | undefined = isWindows
    ? {
      type: srcFilePathType === "dir" ? "dir" : "file",
    }
    : undefined;

  Deno.symlinkSync(src, dest, options);
}

// denoCacheMetadata={"headers":{"x-frame-options":"DENY","x-cache":"Hit from cloudfront","x-content-type-options":"nosniff","x-amz-replication-status":"COMPLETED","cross-origin-embedder-policy":"same-origin","cross-origin-resource-policy":"same-origin","content-type":"application/typescript; charset=utf-8","accept-ranges":"bytes","cache-control":"public, max-age=31536000, immutable","content-length":"2095","cross-origin-opener-policy":"same-origin","access-control-allow-origin":"*","last-modified":"Thu, 31 Mar 2022 15:56:34 GMT","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","x-amz-cf-id":"4dA65sVxVFzqfTpr7osuiggVwEIjrfW8rgmxo6gOCslgEvxWQROZzA==","x-amz-cf-pop":"IAD61-P1","x-amz-version-id":"uyBFsdXe3flRqU3S3uhclVxeNiPxUuNS","via":"http/2 edgeproxy-h","vary":"Accept-Encoding, Origin","etag":"\"2cf4a6cb5e454f2f8d03cbf1a5ce7d29\"","referrer-policy":"strict-origin-when-cross-origin","age":"18859705","date":"Thu, 26 Dec 2024 09:29:49 GMT","strict-transport-security":"max-age=63072000; includeSubDomains; preload","server-timing":"fetchSource;dur=52","server":"deno/gcp-us-east4"},"url":"https://deno.land/std@0.133.0/fs/ensure_symlink.ts","time":1754065093}