// extracted from https://deno.land/std@0.161.0/async/mod.ts?s=deferred

/**
 * deferredPromise
 *
 * @example
 * ```js
 *    import { deferredPromise } from "https://deno.land/std@0.161.0/async/deferred.ts";
 *
 *    const aPromise = deferredPromise()
 *    aPromise.resolve(42)
 *    aPromise.reject(new Error(`error`)) // alternatively
 * ```
 */
export function deferredPromise() {
    let methods
    let state = "pending"
    const promise = new Promise((resolve, reject) => {
        methods = {
            async resolve(value) {
                await value
                state = "fulfilled"
                resolve(value)
            },
            reject(reason) {
                state = "rejected"
                reject(reason)
            },
        }
    })
    Object.defineProperty(promise, "state", {
        get: () => state,
    })
    return Object.assign(promise, methods)
}

// classed version of defered promise 
export class DeferedPromise extends Promise {
    constructor(...args) {
        let methods
        let state = "pending"
        super((resolve, reject)=>{
            methods = {
                async resolve(value) {
                    await value
                    state = "fulfilled"
                    resolve(value)
                },
                reject(reason) {
                    state = "rejected"
                    reject(reason)
                },
            }
        })
        Object.defineProperty(this, "state", {
            get: () => state,
        })
        Object.assign(this, methods)
    }
}

const objectPrototype = Object.getPrototypeOf({})

/**
 * Promise.allRecursively
 *
 * @example
 * * ```js
 *     await recursivePromiseAll({a:1, b: [ 1, 2, new Promise((resolve, reject)=>resolve(10))] })
 *     // >>> { a: 1, b: [ 1, 2, 10 ] }
 * ```
 */
export const recursivePromiseAll = (object, alreadySeen = new Map()) => {
    if (alreadySeen.has(object)) {
        return alreadySeen.get(object)
    }
    if (object instanceof Promise) {
        return object
    } else if (object instanceof Array) {
        const resolveLink = deferredPromise()
        alreadySeen.set(object, resolveLink)
        Promise.all(object.map((each) => recursivePromiseAll(each, alreadySeen)))
            .catch(resolveLink.reject)
            .then(resolveLink.resolve)
        return resolveLink
        // if pure object
    } else if (Object.getPrototypeOf(object) == objectPrototype) {
        const resolveLink = deferredPromise()
        alreadySeen.set(object, resolveLink)
        ;(async () => {
            try {
                const keysAndValues = await Promise.all(Object.entries(object).map((keyAndValue) => recursivePromiseAll(keyAndValue, alreadySeen)))
                resolveLink.resolve(Object.fromEntries(keysAndValues))
            } catch (error) {
                resolveLink.reject(error)
            }
        })()
        return resolveLink
        // either a primitive or a custom object that doesnt inhert from a promise
    } else {
        return object
    }
}

// denoCacheMetadata={"headers":{"strict-transport-security":"max-age=63072000; includeSubDomains; preload","x-amz-replication-status":"COMPLETED","cross-origin-embedder-policy":"same-origin","x-content-type-options":"nosniff","x-amz-version-id":"CflFsnjjvnUKsRCJtob_PX49y4LmpnI3","x-cache":"Miss from cloudfront","access-control-allow-origin":"*","x-amz-cf-id":"77XvorwGZUKGXg2m6d-QmsHedmaHyfBZsyzhRsfEBbX7WaIVPoHYag==","cross-origin-opener-policy":"same-origin","cross-origin-resource-policy":"same-origin","etag":"W/\"d8f2c8d1a2f55da93bca2ada26f69650\"","vary":"accept-encoding, Origin","x-amz-cf-pop":"IAD61-P1","via":"http/2 edgeproxy-h","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","content-type":"application/javascript","date":"Fri, 01 Aug 2025 16:06:19 GMT","server":"deno/gcp-us-east4","x-amz-server-side-encryption":"AES256","referrer-policy":"strict-origin-when-cross-origin","cache-control":"public, max-age=31536000, immutable","last-modified":"Sun, 10 Mar 2024 21:38:58 GMT","x-frame-options":"DENY","server-timing":"fetchSource;dur=30"},"url":"https://deno.land/x/good@1.6.0.1/async.js","time":1754064378}