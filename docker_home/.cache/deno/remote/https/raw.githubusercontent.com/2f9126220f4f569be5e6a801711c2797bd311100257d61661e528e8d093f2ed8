import { compare, subtract as subTime } from "https://esm.sh/@foxglove/rostime";
import Heap from "https://esm.sh/heap" /* CHECKME: file(s) didn't exist, assuming npm */;

import { BaseIterator } from "./BaseIterator.ts";
import { ChunkInfo } from "./record.ts";
import { ChunkReadResult, IteratorConstructorArgs } from "./types.ts";

export class ReverseIterator extends BaseIterator {
  private remainingChunkInfos: (ChunkInfo | undefined)[];

  constructor(args: IteratorConstructorArgs) {
    // Sort by largest timestamp first
    super(args, (a, b) => {
      return compare(b.time, a.time);
    });

    // These are all chunks that we can consider for iteration.
    // Only consider chunks with a start before or equal to our position.
    // Chunks starting after our position are not part of reverse iteration
    this.chunkInfos = this.chunkInfos.filter((info) => {
      return compare(info.startTime, this.position) <= 0;
    });

    // The chunk info heap sorts chunk infos by decreasing end time
    const chunkInfoHeap = new Heap<ChunkInfo>((a, b) => {
      return compare(b.endTime, a.endTime);
    });

    for (const info of this.chunkInfos) {
      chunkInfoHeap.insert(info);
    }

    this.remainingChunkInfos = [];
    while (chunkInfoHeap.size() > 0) {
      this.remainingChunkInfos.push(chunkInfoHeap.pop());
    }
  }

  protected override async loadNext(): Promise<boolean> {
    const stamp = this.position;

    const firstChunkInfo = this.remainingChunkInfos[0];
    if (!firstChunkInfo) {
      return false;
    }

    this.remainingChunkInfos[0] = undefined;

    let start = firstChunkInfo.startTime;
    const chunksToLoad: ChunkInfo[] = [firstChunkInfo];

    for (let idx = 1; idx < this.remainingChunkInfos.length; ++idx) {
      const nextChunkInfo = this.remainingChunkInfos[idx];
      if (!nextChunkInfo) {
        continue;
      }

      // The chunk ends before our selected start, we end chunk selection
      if (compare(nextChunkInfo.endTime, start) < 0) {
        break;
      }

      // The chunk ends after our start so we will load it
      chunksToLoad.push(nextChunkInfo);

      // If the chunk starts after or at the start time, we have fully consumed it
      const startCompare = compare(nextChunkInfo.startTime, start);
      if (startCompare >= 0) {
        this.remainingChunkInfos[idx] = undefined;
      }
    }

    // filter out undefined chunk infos
    this.remainingChunkInfos = this.remainingChunkInfos.filter(Boolean);

    // End of file or no more candidates
    if (chunksToLoad.length === 0) {
      return false;
    }

    // Subtract 1 nsec to make the next position 1 before
    this.position = start = subTime(start, { sec: 0, nsec: 1 });

    const heap = this.heap;
    const newCache = new Map<number, ChunkReadResult>();
    for (const chunkInfo of chunksToLoad) {
      let result = this.cachedChunkReadResults.get(chunkInfo.chunkPosition);
      if (!result) {
        result = await this.reader.readChunk(chunkInfo, this.decompress);
      }

      // Keep chunk read results for chunks where end is in the chunk
      // End is the next position we will read so we don't need to re-read the chunk
      if (compare(chunkInfo.startTime, start) <= 0 && compare(chunkInfo.endTime, start) >= 0) {
        newCache.set(chunkInfo.chunkPosition, result);
      }

      for (const indexData of result.indices) {
        if (this.connectionIds && !this.connectionIds.has(indexData.conn)) {
          continue;
        }
        for (const indexEntry of indexData.indices ?? []) {
          // skip any time that is before our current timestamp or after end, we will never iterate to those
          if (compare(indexEntry.time, start) <= 0 || compare(indexEntry.time, stamp) > 0) {
            continue;
          }
          heap.push({ time: indexEntry.time, offset: indexEntry.offset, chunkReadResult: result });
        }
      }
    }

    this.cachedChunkReadResults = newCache;
    return true;
  }
}

// denoCacheMetadata={"headers":{"x-timer":"S1753134630.594184,VS0,VE95","access-control-allow-origin":"*","x-fastly-request-id":"78159278249e3b387b760d38df8e928dab7dbfb1","vary":"Authorization,Accept-Encoding","x-xss-protection":"1; mode=block","date":"Mon, 21 Jul 2025 21:50:29 GMT","x-cache":"MISS","cache-control":"max-age=300","accept-ranges":"bytes","x-frame-options":"deny","expires":"Mon, 21 Jul 2025 21:55:29 GMT","etag":"W/\"d114eec49cc231af2bcd7eb217557a364580d8ad63e4430bfde1f5f2ed555ad6\"","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","x-served-by":"cache-iah17227-IAH","source-age":"0","x-cache-hits":"0","strict-transport-security":"max-age=31536000","cross-origin-resource-policy":"cross-origin","x-content-type-options":"nosniff","x-github-request-id":"E928:25C805:4F3EA:68599:687EB625","via":"1.1 varnish","content-type":"text/plain; charset=utf-8"},"url":"https://raw.githubusercontent.com/jeff-hykin/rapid_ros_server/dev/subrepos/foxglove_rosbag/src/ReverseIterator.ts","time":1753134629}