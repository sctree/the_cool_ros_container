// Copyright 2018-2020 Cruise LLC
// Copyright 2021 Foxglove Technologies Inc
//
// This source code is licensed under the Apache License, Version 2.0,
// found in the LICENSE file in the root directory of this source tree.
// You may not use this file except in compliance with the License.
import { extractFields, extractTime } from "./fields.ts";
function readUint32(buff) {
  const view = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
  return view.getUint32(0, true);
}
function readInt32(buff) {
  const view = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
  return view.getInt32(0, true);
}
function readBigUInt64(buff) {
  const view = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
  // Avoid using DataView.getBigUint64 for improved browser compatibility
  const bigint = BigInt(view.getUint32(0, true)) | BigInt(view.getUint32(4, true)) << 32n;
  if (bigint > Number.MAX_SAFE_INTEGER) {
    throw new Error(`Read a bigint larger than 2**53: ${bigint}`);
  }
  return Number(bigint);
}
export class Record {
  offset;
  dataOffset;
  end;
  length;
  parseData(_buffer) {
  /* no-op */ }
}
export class BagHeader extends Record {
  static opcode = 3;
  indexPosition;
  connectionCount;
  chunkCount;
  constructor(fields){
    super();
    this.indexPosition = readBigUInt64(fields.index_pos);
    this.connectionCount = readInt32(fields.conn_count);
    this.chunkCount = readInt32(fields.chunk_count);
  }
}
export class Chunk extends Record {
  static opcode = 5;
  compression;
  size;
  data;
  constructor(fields){
    super();
    this.compression = new TextDecoder().decode(fields.compression);
    this.size = readUint32(fields.size);
  }
  parseData(buffer) {
    this.data = buffer;
  }
}
const getField = (fields, key)=>{
  if (fields[key] == undefined) {
    throw new Error(`Connection header is missing ${key}.`);
  }
  return new TextDecoder().decode(fields[key]);
};
export class Connection extends Record {
  static opcode = 7;
  conn;
  topic;
  type;
  md5sum;
  messageDefinition;
  callerid;
  latching;
  reader;
  constructor(fields){
    super();
    this.conn = readUint32(fields.conn);
    this.topic = new TextDecoder().decode(fields.topic);
    this.type = undefined;
    this.md5sum = undefined;
    this.messageDefinition = "";
  }
  parseData(buffer) {
    const fields = extractFields(buffer);
    this.type = getField(fields, "type");
    this.md5sum = getField(fields, "md5sum");
    this.messageDefinition = getField(fields, "message_definition");
    if (fields.callerid != undefined) {
      this.callerid = new TextDecoder().decode(fields.callerid);
    }
    if (fields.latching != undefined) {
      this.latching = new TextDecoder().decode(fields.latching) === "1";
    }
  }
}
export class MessageData extends Record {
  static opcode = 2;
  conn;
  time;
  data;
  constructor(fields){
    super();
    this.conn = readUint32(fields.conn);
    this.time = extractTime(fields.time, 0);
  }
  parseData(buffer) {
    this.data = buffer;
  }
}
export class IndexData extends Record {
  static opcode = 4;
  ver;
  conn;
  count;
  indices;
  constructor(fields){
    super();
    this.ver = readUint32(fields.ver);
    this.conn = readUint32(fields.conn);
    this.count = readUint32(fields.count);
  }
  parseData(buffer) {
    this.indices = [];
    const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    for(let i = 0; i < this.count; i++){
      this.indices.push({
        time: extractTime(buffer, i * 12),
        offset: view.getUint32(i * 12 + 8, true)
      });
    }
  }
}
export class ChunkInfo extends Record {
  static opcode = 6;
  ver;
  chunkPosition;
  startTime;
  endTime;
  count;
  connections = [];
  nextChunk;
  constructor(fields){
    super();
    this.ver = readUint32(fields.ver);
    this.chunkPosition = readBigUInt64(fields.chunk_pos);
    this.startTime = extractTime(fields.start_time, 0);
    this.endTime = extractTime(fields.end_time, 0);
    this.count = readUint32(fields.count);
  }
  parseData(buffer) {
    this.connections = [];
    const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    for(let i = 0; i < this.count; i++){
      this.connections.push({
        conn: view.getUint32(i * 8, true),
        count: view.getUint32(i * 8 + 4, true)
      });
    }
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=5308780254187268476,14123760845228771775